#jinja2: lstrip_blocks: True
################################################################################
# GENERATED FROM ANSIBLE TEMPLATE. DO NOT MODIFY IN PLACE!                     #
################################################################################

# Lots of debugging, disk is cheap.
log syslog all;

# Manually set the router id, for sanity.
{% for intf in network.netif %}
  {% if intf.name == "lo1" %}
router id {{ intf['ipv4_addr'] }};
  {% endif %}
{% endfor %}

# Define our local AS.
define myas = {{ network.bird.asn }};

# Include BGP configuration
include "/usr/local/etc/bird/bird6-bgp-common.conf";

{% if network.bird.ipv6_host_includes is defined %}
# Host includes (defined by network.bird.ipv6_host_includes)
{% for file in network.bird.ipv6_host_includes %}
include "{{ file }}";
{% endfor %}
{% endif %}

protocol direct {
	# This protocol is required for proper recovery on BSD systems. It
	# prevents IGPs from clobbering device routes, previously installed
	# by the kernel, during transient network states. For more information,
	# see section 6.3 of the BIRD manual.
}

protocol device {
	# This protocol only serves to provide BIRD with information about
	# the network interfaces on the system.
	scan time 10;
}

protocol kernel {
	# The kernel protocol performs synchronization between the BIRD routing
	# table, and the OS kernel routing table.
	export filter {
		accept;
	};
	scan time 15;
}

protocol ospf {
	# Interval to process state updates
	tick 2;
	# All OSPF areas must connect to area 0.
	area 0 {
		# Flood external routes into area (default).
		stub no;
{% for intf in network.netif %}
  {% if intf.ospf is defined and intf.ospf == 'normal' %}
		interface "{{ intf.name }}" {
			cost 5;
			hello 2;
			dead 10;
		};
  {% elif intf.ospf is defined and intf.ospf == 'stub' %}
  {# Stub interfaces do not get OSPF hello, but routes announced elsewhere #}
		interface "{{ intf.name }}" { stub; };
  {% endif %}
{% endfor %}
	};
}

{% if network.bird.bgp is defined %}
protocol static static_bgp_v6 {
        # This static protocol instance is used to define what the routes that
        # will ultimately be exported by BGP.

        # All routes from this protocol are sent to the BIRD routing table.
        import all;

	# Prefixes for this site.
{% for prefix in network.bird.bgp.ipv6_static_prefixes|default([]) %}
	route {{ prefix }} reject;
{% endfor %}
}

 {% if network.bird.bgp.ipv6_portable_prefixes is defined %} 
protocol static portable_bgp_v6 {
        # This static protocol instance is used to define what the routes that
        # will be exported by BGP, when this is the production site.
        {% if new_active_location is defined and new_active_location == location %}
        {# This case is hit when running the site failover playbook. #}
        #disabled yes;
        {% elif new_active_location is not defined and active_location == location %}
        {# This case is hit at the active site during normal operations. #}
        #disabled yes;
        {% else %}
        {# Default case hit when router is not a primary site. #}
        disabled yes;
        {% endif %}

        # All routes from this protocol are sent to the BIRD routing table.
        import all;

        # Portable production subnet.
    {% for prefix in network.bird.bgp.ipv6_portable_prefixes|default([]) %}
	route {{ prefix }} reject;
    {% endfor %}

	# These are longer prefixes that are routed internally. They could be
	# announced by the firewall too, but that would require a firewall
	# change on BGP failover.
    {% for prefix in network.bird.bgp.ipv6_portable_internal_routes|default([]) %}
    {# TODO: This could be done more elegantly... #}
	route {{ prefix }}  via {{ ipv6_fw_outside }};
    {% endfor %}
}
  {% endif %}

{% for neighbor in network.bird.bgp.ipv6_ebgp_sessions|default([]) %}
protocol bgp {{ neighbor.name }} from ebgp6 {
	neighbor {{ neighbor.neighborip }} as {{ neighbor.neighboras }};
}
{% endfor %}


{% for neighbor in network.bird.bgp.ibgp_sessions|default([]) %}
protocol bgp {{ neighbor.name }} from ibgp6 {
	neighbor {{ neighbor.neighborip6 }} as {{ network.bird.asn }};
	local {{ ipv6_loopback }} as {{ network.bird.asn }};
}
{% endfor %}
{% endif %}
